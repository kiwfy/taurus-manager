{{#contentFor 'pageScripts'}}
<script>
  $(document).ready(function () {

    function getSelectedQueues() {
      const selected = [];
      $('.select-queue').each((_, element) => {
        const checked = $(element).is(':checked');
        if (checked) {
          selected.push({
            name: $(element).data('name'),
            hostId: $(element).data('hostid'),
          });
        }
      });
      return selected;
    };

    function validateSelectedQueues(queues) {
      if (queues.length > 0) {
        return true;
      }
      $('#minimumQueuesSelectedToast').toast('show');
      return false;
    }

    function dispatchAction(action, queues) {
      const payload = {
        queues,
      };
      $.ajax({
        method: 'POST',
        url: `/backend/queues/${action}`,
        data: JSON.stringify(payload),
        contentType: 'application/json',
      }).done(() => {
        window.location.reload();
      }).fail((err) => {
        console.log(err.responseText);
      });
    }

    $('#selectAllQueues').change(function () {
      $('.select-group-queues').prop('checked', this.checked);
      $('.select-queue').prop('checked', this.checked);
    });

    $('#pauseQueuesButton').click(function () {
      const queues = getSelectedQueues();
      if (validateSelectedQueues(queues)) {
        return dispatchAction('pause', queues);
      }
    });

    $('#resumeQueuesButton').click(function () {
      const queues = getSelectedQueues();
      if (validateSelectedQueues(queues)) {
        return dispatchAction('resume', queues);
      }
    });

    const refresh = getUrlParam('refresh');

    if (refresh) {
      let timer = refresh / 1000;
      
      setInterval(function () {
        $('.timer').html(`Refreshing in ${timer}...`);
        timer -= 1;
      }, 1000);

      setInterval(function () {
        timer = refresh / 1000;
        refreshQueues();
      }, refresh);
    }

  });
</script>
{{/contentFor}}

<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
  <div>
    <div class="text-xs">Group:</div>
    <h1 class="h3 text-gray-800">{{ groupName }}</h1>
  </div>

  <div class="d-flex align-items-center">
    <span class="timer mr-3"></span>

    <div class="d-flex align-items-center mr-3">
      <input type="checkbox" id="selectAllQueues" role="button" class="mr-1">
      <span>Select all</span>
    </div>

    <div class="dropdown mr-2">
      <button class="btn btn-sm btn-info dropdown-toggle shadow" data-toggle="dropdown">
        Refresh
      </button>
      <div class="dropdown-menu">
        <a class="dropdown-item" href="/groups/{{ groupName }}">No refresh</a>
        <a class="dropdown-item" href="/groups/{{ groupName }}?refresh=5000">5 sec</a>
        <a class="dropdown-item" href="/groups/{{ groupName }}?refresh=10000">10 sec</a>
        <a class="dropdown-item" href="/groups/{{ groupName }}?refresh=30000">30 sec</a>
        <a class="dropdown-item" href="/groups/{{ groupName }}?refresh=60000">60 sec</a>
      </div>
    </div>

    {{#if loggedUser.permissions.pauseQueue}}
    <div class="dropdown mr-2">
      <button class="btn btn-sm btn-primary dropdown-toggle shadow" data-toggle="dropdown">
        Actions
      </button>
      <div class="dropdown-menu">
        <a class="dropdown-item" href="#" data-toggle="modal" data-target="#resumeQueuesDialog">Resume</a>
        <a class="dropdown-item" href="#" data-toggle="modal" data-target="#pauseQueuesDialog">Pause</a>
      </div>
    </div>
    {{/if}}
  </div>
</div>

<!-- Queues -->
<div class="row">
  <div class="col-sm-12">
    <div class="card shadow">
      <div class="card-header">
        <h6 class="mb-0 font-weight-bold">
          Queues
        </h6>
      </div>
      <div class="card-body">
        {{> queues/table
          group=groupName
          queues=queues
        }}
      </div>
    </div>
  </div>
</div>

<!-- Alerts -->
{{> alert alertId='minimumQueuesSelectedToast' alertColor='danger' alertText='Please, select at least 1 queue.'}}

<!-- Dialogs -->
{{> modal
  dialogId='pauseQueuesDialog'
  dialogText='You are about to pause these queues. Do you confirm this action?'
  title='Pause queues'
  yesButtonId='pauseQueuesButton'
  yesButtonColor='warning'
  yesButtonText='Pause'
}}

{{> modal
  dialogId='resumeQueuesDialog'
  dialogText='You are about to resume these queues. Do you confirm this action?'
  title='Resume queues'
  yesButtonId='resumeQueuesButton'
  yesButtonColor='success'
  yesButtonText='Resume'
}}